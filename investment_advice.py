import yfinance as yf
import openai
import json
import asyncio
import sys

if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


async def generate_investment_recommendations(risk_level: str):
    client = openai.AsyncOpenAI(api_key=openai.api_key)

    if risk_level == "low":
        return {
            "risk_level": "low",
            "recommendations": [
                {
                    "type": "bank_deposit",
                    "name": "–î–µ–ø–æ–∑–∏—Ç '–û–≤–µ—Ä–Ω–∞–π—Ç'",
                    "expected_yield_percent": 12,
                    "description": "–ù–∞–¥—ë–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º."
                },
                {
                    "type": "gov_bond",
                    "name": "–ì–æ—Å–æ–±–ª–∏–≥–∞—Ü–∏–∏ –†–ö",
                    "expected_yield_percent": 10,
                    "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥."
                }
            ]
        }

    elif risk_level == "medium":
        stocks = ["AAPL", "MSFT", "GOOGL"]
        data = {ticker: yf.Ticker(ticker).history(period="1y")["Close"].iloc[-1] for ticker in stocks}
        return {
            "risk_level": "medium",
            "recommendations": [
                {"type": "ETF", "name": "SPY (S&P 500)", "expected_yield_percent": 15},
                {"type": "stocks", "companies": data}
            ]
        }

    elif risk_level == "high":
        # --- 1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫ OpenAI ---
        prompt = (
            "–ù–∞–∑–æ–≤–∏ 5 –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–æ–∫–∞–∑–∞–ª–∏ "
            "–Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–æ—Å—Ç –ø–æ —Ü–µ–Ω–µ. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ JSON —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: "
            '["NVDA", "TSLA", "AMD", "META", "AAPL"]'
        )

        response = await client.responses.create(
            model="gpt-4.1-mini",
            input=prompt
        )

        text = response.output_text.strip()
        print("üîç OpenAI raw output:", text)

        # --- 2Ô∏è‚É£ –ß–∏—Å—Ç–∏–º Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        cleaned_text = (
            text.replace("```json", "")
                .replace("```", "")
                .strip()
        )

        # --- 3Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON ---
        try:
            trending_tickers = json.loads(cleaned_text)
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ü–∏–∏ –æ—Ç OpenAI:", trending_tickers)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–∏–∫–µ—Ä—ã.")
            trending_tickers = ["QBTS", "SMCI", "AI", "NVDA", "PLTR"]

        # --- 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ yfinance ---
        stock_data = {}
        for ticker in trending_tickers:
            try:
                info = yf.Ticker(ticker).history(period="1mo")["Close"]
                stock_data[ticker] = {
                    "current_price": round(info.iloc[-1], 2),
                    "month_growth_percent": round(((info.iloc[-1] - info.iloc[0]) / info.iloc[0]) * 100, 2)
                }
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
                continue

        # --- 5Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ---
        return {
            "risk_level": "high",
            "recommendations": [
                {
                    "type": "stocks",
                    "companies": stock_data,
                    "description": "–°–∞–º—ã–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ –∞–∫—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º —Ä—ã–Ω–∫–∞."
                },
                {
                    "type": "crypto",
                    "assets": {"BTC": "Bitcoin", "ETH": "Ethereum"},
                    "description": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ‚Äî –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å."
                }
            ]
        }

    else:
        return {"error": "Unknown risk level."}

def get_risk_level_str(number: int):
    if number == 1:
        return "low"
    if number == 2:
        return "medium"
    if number == 3:
        return "high"
    return "medium"

# --- üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # level –Ω–∞–¥–æ –≤–∑—è—Ç—å —É —é–∑–µ—Ä–∞, –ª–ª–º –ø—É—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —É —Å–∞–º–æ–≥–æ —é–∑–µ—Ä–∞ –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é —Å–ø—Ä–æ—Å–∏—Ç—å
    level = input("–í–≤–µ–¥–∏—Ç–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å (low / medium / high): ")
    result = asyncio.run(generate_investment_recommendations(level))
    print(json.dumps(result, indent=2, ensure_ascii=False))

